{"version":3,"file":"index.esm.js","sources":["../src/getDirents.ts","../src/resolvePath.ts","../src/getPackages.ts","../src/packageWasUsed.ts","../src/readFileLineByLine.ts","../src/main.ts"],"sourcesContent":["import * as fs from 'fs';\n\nconst ENCODING = 'utf-8';\n\n/**\n * Get a list of dirents from the received path.\n * @param {string} path\n * @returns {Promise<import('fs').Dirent[]>}\n */\nfunction getDirents(path: string): Promise<fs.Dirent[]> {\n  const options = {\n    encoding: ENCODING,\n    withFileTypes: true,\n  } as const;\n\n  return new Promise((resolve, reject) => {\n    // TODO: Add option to verbosely display read directories.\n    fs.readdir(path, options, (error, dirents) => {\n      if (error) {\n        // TODO: Display errors as warnings.\n        reject(error);\n        return;\n      }\n\n      resolve(dirents);\n    });\n  });\n}\n\nexport default getDirents;\n","import path from 'path';\n\n/**\n * Resolve path with received segments.\n * @param {...string} segments\n * @returns {string}\n */\nfunction resolvePath(...segments: string[]): string {\n  return path.resolve(process.cwd(), ...segments);\n}\n\nexport default resolvePath;\n","import resolvePath from './resolvePath';\n\n/**\n * Get a list of packages from package.json's dependencies and devDependencies.\n * @returns {string[]}\n */\nasync function getPackages(): Promise<string[]> {\n  try {\n    const path = resolvePath('package.json');\n\n    const { dependencies = {}, devDependencies = {} } = await import(path);\n\n    return [...Object.keys(dependencies), ...Object.keys(devDependencies)];\n  } catch {\n    // TODO: Use original error as reason.\n    process.stdout.write(\"Error: Couldn't import 'package.json'.\");\n    process.exit(1);\n  }\n}\n\nexport default getPackages;\n","/**\n * Check if package was used in import declaration as module specifier.\n * @see {@link https://tc39.es/ecma262/#prod-ImportDeclaration} for more details.\n * @param {string} packageName\n * @param {string} line\n * @returns {boolean}\n */\nfunction packageWasUsedInImportDeclaration(\n  packageName: string,\n  line: string,\n): boolean {\n  const matcher = new RegExp(`import\\\\s+['\"]${packageName}['\"/]`);\n  return matcher.test(line);\n}\n\n/**\n * Check if package was used in from clause as module specifier.\n * @see {@link https://tc39.es/ecma262/#prod-FromClause} for more details.\n * @param {string} packageName\n * @param {string} line\n * @returns {boolean}\n */\nfunction packageWasUsedInFromClause(\n  packageName: string,\n  line: string,\n): boolean {\n  const matcher = new RegExp(`from\\\\s+['\"]${packageName}['\"/]`);\n  return matcher.test(line);\n}\n\n/**\n * Check if package was used in require function as id (module name).\n * @see {@link https://nodejs.org/dist/latest-v15.x/docs/api/modules.html#modules_require_id} for more details.\n * @param {string} packageName\n * @param {string} line\n * @returns {boolean}\n */\nfunction packageWasUsedInRequireFunction(\n  packageName: string,\n  line: string,\n): boolean {\n  const matcher = new RegExp(`require\\\\([\\`'\"]${packageName}[\\`'\"/]`);\n  return matcher.test(line);\n}\n\n/**\n * Check if package was used in import call as assignment expression.\n * @see {@link https://tc39.es/ecma262/#sec-import-calls} for more details.\n * @param {string} packageName\n * @param {string} line\n * @returns {boolean}\n */\nfunction packageWasUsedInImportCall(\n  packageName: string,\n  line: string,\n): boolean {\n  const matcher = new RegExp(`import\\\\([\\`'\"]${packageName}[\\`'\"/]`);\n  return matcher.test(line);\n}\n\n/**\n * Check if package was used.\n * @param {string} packageName\n * @param {string} line\n * @returns {boolean}\n */\nfunction packageWasUsed(packageName: string, line: string): boolean {\n  const checkers = [\n    packageWasUsedInFromClause,\n    packageWasUsedInImportDeclaration,\n    packageWasUsedInRequireFunction,\n    packageWasUsedInImportCall,\n  ];\n\n  return checkers.some((check) => check(packageName, line));\n}\n\nexport default packageWasUsed;\n","import fs from 'fs';\nimport readline from 'readline';\nimport resolvePath from './resolvePath';\nimport { ENCODING } from './main';\n\n/**\n * Reads the file line-by-line and calls 'onLine' callback for each one of them.\n * @param {string} path\n * @param {(line: string) => void} onLine\n * @returns {Promise<void>}\n */\nfunction readFileLineByLine(\n  path: string,\n  onLine: (line: string) => void,\n): Promise<void> {\n  return new Promise((resolve, reject) => {\n    const file = readline.createInterface({\n      input: fs.createReadStream(resolvePath(path), {\n        flags: 'r',\n        encoding: ENCODING,\n      }),\n      terminal: false,\n    });\n\n    file.on('line', onLine);\n\n    file.on('close', () => {\n      resolve();\n    });\n\n    file.on('SIGINT', () => {\n      reject(new Error('SIGINT'));\n    });\n  });\n}\n\nexport default readFileLineByLine;\n","import getDirents from './getDirents';\nimport getPackages from './getPackages';\nimport packageWasUsed from './packageWasUsed';\nimport readFileLineByLine from './readFileLineByLine';\nimport resolvePath from './resolvePath';\n\nexport const ENCODING = 'utf-8';\n\nasync function setup() {\n  const packages = await getPackages();\n\n  async function checkPackageUsage(folder: string) {\n    const dirents = await getDirents(resolvePath(folder));\n\n    for (const dirent of dirents) {\n      const path = `${folder}/${dirent.name}`;\n\n      try {\n        if (dirent.isFile()) {\n          process.stdout.write(`Searching into ${path}\\n`);\n\n          await readFileLineByLine(path, (line) => {\n            packages.forEach((packageName, index) => {\n              if (packageWasUsed(packageName, line)) {\n                packages.splice(index, 1);\n              }\n            });\n          });\n        }\n\n        if (dirent.isDirectory()) await checkPackageUsage(path);\n      } catch {\n        // \"CRIME OCORRE NADA ACONTECE FEIIJOADA\" - AnÃ´nimo\n      }\n    }\n  }\n\n  await checkPackageUsage('.');\n\n  process.stdout.write(`Unused packages:\\n`);\n  packages.forEach((packageName) => process.stdout.write(`${packageName}\\n`));\n}\n\nsetup();\n"],"names":["ENCODING","fs"],"mappings":"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"}